global
  log 127.0.0.1 local2
  maxconn 4096

defaults
  mode http
  log global
  option httplog
  option dontlognull
  option http-server-close
  option forwardfor except 127.0.0.0/8
  option redispatch
  retries 3
  timeout http-request 20s
  timeout queue 1m
  timeout connect 10s
  timeout client 1m
  timeout server 1m
  timeout http-keep-alive 30s
  timeout check 10s
  maxconn 3000

frontend fe_http
  option forwardfor except 127.0.0.1
  option httpclose
  bind *:8080

  ## JWT Part
  http-request deny content-type 'text/html' string 'Missing Authorization HTTP header' unless { req.hdr(authorization) -m found }
  
  # get header part of the JWT
  http-request set-var(txn.alg) http_auth_bearer,jwt_header_query('$.alg')
  
  # get payload part of the JWT
  http-request set-var(txn.exp) http_auth_bearer,jwt_payload_query('$.exp','int')
  http-request set-var(txn.org) http_auth_bearer,jwt_payload_query('$.org')
  
  # Validate the JWT
  http-request deny content-type 'text/html' string 'Unsupported JWT signing algorithm'  unless { var(txn.alg) -m str RS256 }
  http-request deny content-type 'text/html' string 'Invalid JWT signature'  unless { http_auth_bearer,jwt_verify(txn.alg,"/keys/public.pem") -m int 1 }
  
  http-request set-var(txn.now) date()
  http-request deny content-type 'text/html' string 'JWT has expired' if { var(txn.exp),sub(txn.now) -m int lt 0 }


  ## Rate limiting 
  # stick-table type string size 1m expire 10s store http_req_rate(10s)

  acl aclClientA var(txn.org) -m str eq 'clientA'
  acl aclClientB var(txn.org) -m str eq 'clientB'

  use_backend clientA if aclClientA
  use_backend clientB if aclClientB

  default_backend be_http

backend be_http
  http-request return status 404 

backend clientA
  # Rate limiting
  # http-request track-sc0 be_name table fe_http
  balance roundrobin

  http-request set-header Authorization "Bearer $PGREST_JWT_ROLE_A"
  server pgrestservice {{ .Values.pgrest.fullnameOverride }}:{{ .Values.pgrest.service.port }} check port {{ .Values.pgrest.service.port }}

backend clientB
  # Rate limiting
  # http-request track-sc0 be_name table myapi
  # http-request silent-drop if { sc_http_req_rate(0,myapi) gt 3 }

  balance roundrobin

  http-request set-header Authorization "Bearer $PGREST_JWT_ROLE_B"
  server pgrestservice {{ .Values.pgrest.fullnameOverride }}:{{ .Values.pgrest.service.port }} check port {{ .Values.pgrest.service.port }}


